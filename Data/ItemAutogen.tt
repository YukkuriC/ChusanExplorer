<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
const int N=4;
var        types = new    int[N] {1,              3,           8,             9             };
var        names = new string[N] {"NamePlate",    "Trophy",    "MapIcon",     "SystemVoice" };
var    namesPack = new string[N] {"namePlates",   "trophies",  "mapIcons",    "systemVoices"};
var namesVerbose = new string[N] {"名牌",         "称号",      "图标",         "语音"        };
var    sqlFields = new string[N] {"nameplate_id", "trophy_id", "map_icon_id", "voice_id"    };
#>
using System;
using System.Data.SQLite;

namespace ChusanExplorer
{
    public partial class ItemDescriptor
    {
        public static ItemDescriptor[] choices = new ItemDescriptor[]
        {
<#for(int i=0;i<N;i++){#>
            // <#=types[i]#>: <#=names[i]#>
            new ItemDescriptor
            {
                id = <#=types[i]#>,
                nameVerbose = "<#=namesVerbose[i]#>",
                nameField = "<#=names[i]#>",
                nameSQL = "<#=sqlFields[i]#>",
                getterStorage = () => Storage.<#=names[i]#>,
                getterPack = p => p.<#=namesPack[i]#>,
                getterPlayerSet = () => Selected.player.my<#=names[i]#>,
            },
<#}#>
        };
        public static IDStorage<ItemDescriptor> map = Helpers.IDListToDict(choices);
    }

    public static partial class Storage
    {
<#for(int i=0;i<N;i++){#>
        public static IDStorage<BaseItem> <#=names[i]#> = new IDStorage<BaseItem>();
<#}#>
    }

    public partial class Pack
    {
        public void LoadItems()
        {
<#for(int i=0;i<N;i++){#>
            loadItemInFolder(dir<#=names[i]#>, out <#=namesPack[i]#>, ref Storage.<#=names[i]#>);
<#}#>
        }
    }

    public partial class PlayerItemProfile
    {
<#for(int i=0;i<N;i++){#>
        public int <#=names[i]#> { get => fields["<#=names[i]#>"]; set => fields["<#=names[i]#>"] = value; }
<#}#>
        public static PlayerItemProfile FromDB(SQLiteDataReader r) => new PlayerItemProfile
        {
<#for(int i=0;i<N;i++){#>
            <#=names[i]#> = Convert.ToInt32(r["<#=sqlFields[i]#>"]),
<#}#>
        };
    }
}
